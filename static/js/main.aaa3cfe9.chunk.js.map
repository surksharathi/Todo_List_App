{"version":3,"sources":["NewTodoForm.js","Todo.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["NewTodoForm","props","_this","Object","classCallCheck","this","_super","call","state","task","handleChange","bind","assertThisInitialized","handleSubmit","evt","setState","defineProperty","target","name","value","preventDefault","createTodo","objectSpread2","id","uuid","completed","react_default","a","createElement","className","onSubmit","htmlFor","type","placeholder","onChange","Component","Todo","isEditing","handleRemove","toggleForm","handleUpdate","handleToggle","removeTodo","updateTodo","toggleTodo","result","CSSTransition","key","timeout","classNames","onClick","TransitionGroup","class","TodoList","todos","create","remove","update","toggleCompletion","newTodo","concat","toConsumableArray","filter","t","updatedTask","updatedTodos","map","todo","_this2","src_Todo_0","src_NewTodoForm_0","App","src_TodoList_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.aaa3cfe9.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport uuid from \"uuid/v4\";\r\nimport \"./NewTodoForm.css\";\r\n\r\nclass NewTodoForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { task: \"\" };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n  handleChange(evt) {\r\n    this.setState({\r\n      [evt.target.name]: evt.target.value\r\n    });\r\n  }\r\n  handleSubmit(evt) {\r\n    evt.preventDefault();\r\n    this.props.createTodo({ ...this.state, id: uuid(), completed: false });\r\n    this.setState({ task: \"\" });\r\n  }\r\n  render() {\r\n    return (\r\n      <form className='NewTodoForm' onSubmit={this.handleSubmit}>\r\n        <label htmlFor='task'>New Todo</label>\r\n        <input\r\n          type='text'\r\n          placeholder='New Todo'\r\n          id='task'\r\n          name='task'\r\n          value={this.state.task}\r\n          onChange={this.handleChange}\r\n        />\r\n        <button>Add Todo</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\nexport default NewTodoForm;\r\n","import React, { Component } from \"react\";\r\nimport \"./Todo.css\";\r\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\r\n\r\nclass Todo extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isEditing: false,\r\n      task: this.props.task\r\n    };\r\n    this.handleRemove = this.handleRemove.bind(this);\r\n    this.toggleForm = this.toggleForm.bind(this);\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleUpdate = this.handleUpdate.bind(this);\r\n    this.handleToggle = this.handleToggle.bind(this);\r\n  }\r\n  handleRemove() {\r\n    this.props.removeTodo(this.props.id);\r\n  }\r\n  toggleForm() {\r\n    this.setState({ isEditing: !this.state.isEditing });\r\n  }\r\n  handleUpdate(evt) {\r\n    evt.preventDefault();\r\n    //take new task data and pass up to parent\r\n    this.props.updateTodo(this.props.id, this.state.task);\r\n    this.setState({ isEditing: false });\r\n  }\r\n  handleChange(evt) {\r\n    this.setState({\r\n      [evt.target.name]: evt.target.value\r\n    });\r\n  }\r\n  handleToggle(evt) {\r\n    this.props.toggleTodo(this.props.id);\r\n  }\r\n  render() {\r\n    let result;\r\n    if (this.state.isEditing) {\r\n      result = (\r\n        <CSSTransition key='editing' timeout={500} classNames='form'>\r\n          <form className='Todo-edit-form' onSubmit={this.handleUpdate}>\r\n            <input\r\n              type='text'\r\n              value={this.state.task}\r\n              name='task'\r\n              onChange={this.handleChange}\r\n            />\r\n            <button>Save</button>\r\n          </form>\r\n        </CSSTransition>\r\n      );\r\n    } else {\r\n      result = (\r\n        <CSSTransition key='normal' timeout={500} classNames='task-text'>\r\n          <li className='Todo-task' onClick={this.handleToggle}>\r\n            {this.props.task}\r\n          </li>\r\n        </CSSTransition>\r\n      );\r\n    }\r\n    return (\r\n      <TransitionGroup\r\n        className={this.props.completed ? \"Todo completed\" : \"Todo\"}\r\n      >\r\n        {result}\r\n        <div className='Todo-buttons'>\r\n          <button onClick={this.toggleForm}>\r\n            <i class='fas fa-pen' />\r\n          </button>\r\n          <button onClick={this.handleRemove}>\r\n            <i class='fas fa-trash' />\r\n          </button>\r\n        </div>\r\n      </TransitionGroup>\r\n    );\r\n  }\r\n}\r\nexport default Todo;\r\n","import React, { Component } from \"react\";\r\nimport NewTodoForm from \"./NewTodoForm\";\r\nimport Todo from \"./Todo\";\r\nimport \"./TodoList.css\";\r\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\r\n\r\nclass TodoList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      todos: []\r\n    };\r\n    this.create = this.create.bind(this);\r\n    this.remove = this.remove.bind(this);\r\n    this.update = this.update.bind(this);\r\n    this.toggleCompletion = this.toggleCompletion.bind(this);\r\n  }\r\n  create(newTodo) {\r\n    this.setState({\r\n      todos: [...this.state.todos, newTodo]\r\n    });\r\n  }\r\n  remove(id) {\r\n    this.setState({\r\n      todos: this.state.todos.filter(t => t.id !== id)\r\n    });\r\n  }\r\n  update(id, updatedTask) {\r\n    const updatedTodos = this.state.todos.map(todo => {\r\n      if (todo.id === id) {\r\n        return { ...todo, task: updatedTask };\r\n      }\r\n      return todo;\r\n    });\r\n    this.setState({ todos: updatedTodos });\r\n  }\r\n  toggleCompletion(id) {\r\n    const updatedTodos = this.state.todos.map(todo => {\r\n      if (todo.id === id) {\r\n        return { ...todo, completed: !todo.completed };\r\n      }\r\n      return todo;\r\n    });\r\n    this.setState({ todos: updatedTodos });\r\n  }\r\n  render() {\r\n    const todos = this.state.todos.map(todo => {\r\n      return (\r\n        <CSSTransition key={todo.id} timeout={500} classNames='todo'>\r\n          <Todo\r\n            key={todo.id}\r\n            id={todo.id}\r\n            task={todo.task}\r\n            completed={todo.completed}\r\n            removeTodo={this.remove}\r\n            updateTodo={this.update}\r\n            toggleTodo={this.toggleCompletion}\r\n          />\r\n        </CSSTransition>\r\n      );\r\n    });\r\n    return (\r\n      <div className='TodoList'>\r\n        <h1>\r\n          Get To Work! <span>An Animated Todo List Made With React .</span>\r\n        </h1>\r\n        <NewTodoForm createTodo={this.create} />\r\n\r\n        <ul>\r\n          <TransitionGroup className='todo-list'>{todos}</TransitionGroup>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default TodoList;\r\n","import React, { Component } from \"react\";\r\nimport TodoList from \"./TodoList\";\r\nimport \"./App.css\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <TodoList />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}